<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
<style>
    html, body {
    width: 100%;
    height: 100%;
    margin: 0px 0px 0px 0px;
    padding: 0px;
    background-color: #B36A5E;
    font-family: 'Acme', sans-serif;
}

#container {
    margin: 50px;
    display: flex;
    flex-wrap: wrap;
    flex-direction:column;
    align-items: center;
}

h1{
    text-align: center;
    font-size: 45px;
    color: #C89F9C;
    letter-spacing: .1em;
    margin: 20px 10px 0px 10px;
}

#style{
    font-style: italic;
    text-shadow: 6px 6px 3px #FFFA8F;
}

.board{
    background-color: #C97C5D;
    border: 2px dashed #C98E7D;
    box-shadow: 3px 3px 6px #C98E7D;
    width:100%;
    height: 400px;
    padding: 0;
    position: relative;
}

.info{
    margin-bottom: 50px; 
    margin-top: 20px;
    color: #C9856D;
    display: flex;
    flex-direction: column;
}

input {
    border: #C9856D;
    box-shadow: 3px 3px 1px 0 #C9856D;
    border-radius: 5px;
    padding: 5px;
    margin-bottom: 10px;
}

.point{
    width:8px;
    height:8px;
    border-radius: 5px;
    background-color: #EED7C5;
    position: absolute;
    animation: breathe 1.5s alternate-reverse infinite ease-in-out;

}

#btn{
    background-color: #C97C5D;
    border-radius: 5px;
    padding: 15px 25px 15px 25px;
    border-style: none;
    color:#EED7C5;
    box-shadow: 2px 2px 5px #C9856D;
    font-size: 26px;
    margin-top: 10px;
    font-family: 'Acme', sans-serif;
}

#btn:hover {
    box-shadow: 3px 3px 20px #EED7C5;
    cursor:pointer;
}

p, label {
    font-size: 24px;
    margin-bottom: 10px;
    margin-top: 5px;
}

#maxxy {
    align-items: center;
    text-align: center;
    font-weight: bold;
    letter-spacing: .1em;

}

#maxx, #maxy {
    font-size: 30px;
}

@keyframes breathe {
    0% {
        opacity: 50%;
        
    }
    100% {
        opacity: 100%;
    }
}
</style>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Acme&display=swap" rel="stylesheet">
    <title>Sierpinski Triangle</title>
</head>

<body id="body">
<h1>Sierpinski Triangle</h1>

    <div id ="container">

        <div class="board" id="board">

            <div class="point" id="point" style="display: none;"></div>

        </div>
<h1>Enter any 2 coordinates within max range to plot the triangle</h1>
        <div class="info">
            
            <p id="maxxy">
                
                Max X = <span id="maxx">700</span>
                , Max Y = <span id="maxy">700</span>
            </p>
            <label for="x"> X Co-ordinate:</label>
                <input type="number" id="x" name="x">

            <label for="y"> Y Co-ordinate:</label>
                <input type="number" id="y" name="y">
            </p>

            <button id="btn" type="submit">
                Plot Point
            </button>
        </div>

    </div>
<script>
    const container = document.getElementById('container');

const board = document.getElementById('board');

const x = document.getElementById('x')
const y = document.getElementById('y')
console.log(x.value);
console.log(y.value);


const point = document.getElementById('point');
const btn = document.getElementById('btn');

let widthX = document.getElementById('board').offsetWidth;
let heightY = document.getElementById('board').offsetHeight;

let maxX = document.getElementById('maxx').innerText = widthX -6;
let maxY = document.getElementById('maxy').innerText = heightY -6;

class Dot {
    constructor(x, y) {
        this.x = x;
        this.y = y;
        this.pointElement = this.constructPoint();
        console.log(this.pointElement);
        this.plotPoint();
    }

constructPoint() {
    let point = document.createElement('div')
    point.style.left = this.x + 'px';
    point.style.top  = this.y + 'px';
    point.classList.add('point')
    
    return point;
}

plotPoint() {
    board.appendChild(this.pointElement)
    } 
}

const wait = (ms) => {
    return new Promise(resolve => {
        setTimeout(resolve, ms);
    });
}

const initialSetup = () => {
    let h = Math.round(parseInt(getComputedStyle(board).height))
    let w = Math.round(parseInt(getComputedStyle(board).width))

    const points = [];

    let p1 = new Dot(w/2, h/7); //top
    let p2 = new Dot(w/4.5, h/1.5) //bottom left
    let p3 = new Dot(w/1.3, h/1.5) //bottom right

    points.push(p1, p2, p3);

    return points;
}

let points = initialSetup();


btn.addEventListener("click", xy)

async function xy() {
    console.log(x.value, y.value);
    if (x.value > maxX || y.value > maxY) {
        alert("please enter a number within maximum range for both x and y");
        return;
    } 
     
    let currentPoint = new Dot (x.value, y.value)
  


while (true) {
    await wait(10);

    let randPoint = points[Math.floor(Math.random()* points.length)];

    let xDist = (randPoint.x + currentPoint.x) / 2;
    let yDist = (randPoint.y + currentPoint.y) / 2;

    currentPoint = new Dot (xDist, yDist)
};
}  
</script>

</body>

</html>